/*
Copyright Â© 2024 NAME HERE <EMAIL ADDRESS>
*/
package report

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/tosbaa/acucli/helpers/filehelper"
	"github.com/tosbaa/acucli/helpers/httpclient"
	"github.com/tosbaa/acucli/helpers/jsonoutput"
)

type ReportSource struct {
	Description string   `json:"description"`
	ListType    string   `json:"list_type"`
	IDList      []string `json:"id_list"`
}

type ReportRequest struct {
	TemplateID string       `json:"template_id"`
	Source     ReportSource `json:"source"`
}

// generateCmd represents the generate command
var GenerateCmd = &cobra.Command{
	Use:   "generate",
	Short: "Generate a new report",
	Long: `Generate a new report based on scan IDs. Takes scan IDs from stdin. Example:

echo "scan_id_here" | acucli report generate --template=11111111-1111-1111-1111-111111111126 --description="My Report" --list-type=all_vulnerabilities

Available list types:
- all_vulnerabilities (default)
- open_vulnerabilities
- fixed_vulnerabilities

Available template IDs:
- 11111111-1111-1111-1111-111111111126 (Comprehensive)
- 11111111-1111-1111-1111-111111111111 (Developer)
- 11111111-1111-1111-1111-111111111112 (Executive Summary)
- 11111111-1111-1111-1111-111111111113 (Quick)
- 11111111-1111-1111-1111-111111111124 (OWASP Top 10 2021)`,
	Run: func(cmd *cobra.Command, args []string) {
		input := filehelper.ReadStdin()
		if input == nil || len(input) == 0 {
			jsonoutput.OutputErrorAsJSON(fmt.Errorf("no scan IDs provided"), "Error")
			return
		}

		templateID, _ := cmd.Flags().GetString("template")
		if templateID == "" {
			// Default to Comprehensive template
			templateID = "11111111-1111-1111-1111-111111111126"
		}

		description, _ := cmd.Flags().GetString("description")
		if description == "" {
			description = "Report generated by acucli"
		}

		listType, _ := cmd.Flags().GetString("list-type")
		if listType == "" {
			listType = "all_vulnerabilities"
		}

		generateReport(templateID, description, listType, input)
	},
}

func generateReport(templateID, description, listType string, scanIDs []string) {
	reportRequest := ReportRequest{
		TemplateID: templateID,
		Source: ReportSource{
			Description: description,
			ListType:    listType,
			IDList:      scanIDs,
		},
	}

	requestJson, err := json.Marshal(reportRequest)
	if err != nil {
		jsonoutput.OutputErrorAsJSON(err, "Error creating JSON request")
		return
	}

	req, err := http.NewRequest("POST", fmt.Sprintf("%s%s", viper.GetString("URL"), "/reports"), bytes.NewBuffer(requestJson))
	if err != nil {
		jsonoutput.OutputErrorAsJSON(err, "Error creating request")
		return
	}
	req.Header.Set("Content-Type", "application/json")

	// Perform the request using the custom client
	resp, err := httpclient.MyHTTPClient.Do(req)
	if err != nil {
		jsonoutput.OutputErrorAsJSON(err, "Error making request")
		return
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		jsonoutput.OutputErrorAsJSON(err, "Error reading response body")
		return
	}

	// Check if the response is valid JSON
	var responseBody interface{}
	err = json.Unmarshal(body, &responseBody)
	if err != nil {
		jsonoutput.OutputErrorAsJSON(err, "Error parsing JSON")
		return
	}

	// Output only the JSON response
	jsonoutput.OutputRawJSON(body)
}

func init() {
	GenerateCmd.Flags().StringP("template", "t", "11111111-1111-1111-1111-111111111126", "Report template ID")
	GenerateCmd.Flags().StringP("description", "d", "Report generated by acucli", "Report description")
	GenerateCmd.Flags().StringP("list-type", "l", "all_vulnerabilities", "List type (all_vulnerabilities, open_vulnerabilities, fixed_vulnerabilities)")

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// generateCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// generateCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
